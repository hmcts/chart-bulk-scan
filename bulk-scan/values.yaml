bulk-scan-processor:
  java:
    ingressHost: ""
    releaseNameOverride: "{{ .Release.Name }}-bsp"
    secrets:
      SB_CONN_STRING:
        secretRef: servicebus-secret-namespace-{{ .Release.Name }}-sb
        key: connectionString
      STORAGE_ACCOUNT_NAME:
        secretRef: bsp-storage-account-creds
        key: storageAccountName
      STORAGE_KEY:
        secretRef: bsp-storage-account-creds
        key: accessKey
    environment:
      STORAGE_URL: "https://bulk-scanning.demo.platform.hmcts.net"
      QUEUE_ENVELOPE_SEND: "$(SB_CONN_STRING);EntityPath=envelopes"
      QUEUE_NOTIFICATIONS_SEND: "$(SB_CONN_STRING);EntityPath=notifications"
      QUEUE_NOTIFICATIONS_READ: "$(SB_CONN_STRING);EntityPath=notifications"
      QUEUE_PROCESSED_ENVELOPES_READ: "$(SB_CONN_STRING);EntityPath=processed-envelopes"
      PROCESSED_ENVELOPES_QUEUE_WRITE_CONN_STRING: "${SB_CONN_STRING};EntityPath=processed-envelopes"
      SCAN_ENABLED: "true"
      SCAN_DELAY: "4000"
      REUPLOAD_ENABLED: "true"
      REUPLOAD_DELAY: "4000"
      SPRING_MAIL_HOST: "false"
      NOTIFICATIONS_TO_ORCHESTRATOR_TASK_ENABLED: "true"
      NOTIFICATIONS_TO_ORCHESTRATOR_TASK_DELAY: "3000"
      BULK_SCANNING_DB_USER_NAME: "{{ .Values.global.postgresqlUsername}}"
      BULK_SCANNING_DB_PASSWORD: "{{ .Values.global.postgresqlPassword}}"
      BULK_SCANNING_DB_NAME: "bulk_scan"
      BULK_SCANNING_DB_HOST: "{{ .Release.Name }}-postgresql"
      BULK_SCANNING_DB_PORT: "5432"
      FLYWAY_URL: "jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/bulk_scan"
      FLYWAY_USER: "{{ .Values.global.postgresqlUsername}}"
      FLYWAY_PASSWORD: "{{ .Values.global.postgresqlPassword}}"
      FLYWAY_NOOP_STRATEGY: "false"
      PROCESS_PAYMENTS_ENABLED: "false"
      S2S_SECRET: AAAAAAAAAAAAAAAA
      S2S_URL: "http://{{ .Release.Name }}-s2s"
      DOCUMENT_MANAGEMENT_URL: "http://{{ .Release.Name }}-dm-store"
      DELETE_REJECTED_FILES_ENABLED: "false"
  servicebus:
    releaseNameOverride: "{{ .Release.Name }}-sb"
    resourceGroup: bulk-scan-aks
    teamName: "Software Engineering"
    location: uksouth
    serviceplan: basic
    setup:
      queues:
        - name: envelopes
        - name: notifications
        - name: processed-envelopes
        - name: payments

bulk-scan-orchestrator:
  java:
    releaseNameOverride: "{{ .Release.Name }}-bso"
    ingressHost: ""
    secrets:
      SB_CONN_STRING:
        secretRef: servicebus-secret-namespace-{{ .Release.Name }}-sb
        key: connectionString
      IDAM_CLIENT_SECRET:
        secretRef: bsp-orchestrator-creds
        key: idam-client-secret
      IDAM_USERS_BULKSCAN_USERNAME:
        secretRef: bsp-orchestrator-creds
        key: idam-users-bulkscan-username
      IDAM_USERS_BULKSCAN_PASSWORD:
        secretRef: bsp-orchestrator-creds
        key: idam-users-bulkscan-password
      IDAM_USERS_CMC_USERNAME:
        secretRef: bsp-orchestrator-creds
        key: idam-users-cmc-username
      IDAM_USERS_CMC_PASSWORD:
        secretRef: bsp-orchestrator-creds
        key: idam-users-cmc-password
      IDAM_USERS_DIV_USERNAME:
        secretRef: bsp-orchestrator-creds
        key: idam-users-div-username
      IDAM_USERS_DIV_PASSWORD:
        secretRef: bsp-orchestrator-creds
        key: idam-users-div-password
      IDAM_USERS_PROBATE_USERNAME:
        secretRef: bsp-orchestrator-creds
        key: idam-users-probate-username
      IDAM_USERS_PROBATE_PASSWORD:
        secretRef: bsp-orchestrator-creds
        key: idam-users-probate-password
      IDAM_USERS_SSCS_USERNAME:
        secretRef: bsp-orchestrator-creds
        key: idam-users-sscs-username
      IDAM_USERS_SSCS_PASSWORD:
        secretRef: bsp-orchestrator-creds
        key: idam-users-sscs-password
    environment:
      S2S_SECRET: AAAAAAAAAAAAAAAA
      ENVELOPES_QUEUE_CONNECTION_STRING: "$(SB_CONN_STRING);EntityPath=envelopes"
      ENVELOPES_QUEUE_MAX_DELIVERY_COUNT: "10"
      PROCESSED_ENVELOPES_QUEUE_CONNECTION_STRING: "$(SB_CONN_STRING);EntityPath=processed-envelopes"
      PAYMENTS_QUEUE_CONNECTION_STRING: "$(SB_CONN_STRING);EntityPath=payments"
      QUEUE_READ_INTERVAL: "30000"
      DELETE_ENVELOPES_DLQ_MESSAGES_ENABLED: "true"
      DELETE_ENVELOPES_DLQ_MESSAGES_CRON: "0 * * * * *"
      DELETE_ENVELOPES_DLQ_MESSAGES_TTL: "10s"
      S2S_URL: "http://{{ .Release.Name }}-s2s"
      IDAM_API_URL: "{{ .Values.global.idamApiUrl }}"
      IDAM_CLIENT_REDIRECT_URI: "{{ .Values.global.bsoIdamRedirectUrl }}"
      CORE_CASE_DATA_API_URL: "{{tpl .Values.global.ccdDataStoreUrl $}}"
      DOCUMENT_MANAGEMENT_URL: "http://{{ .Release.Name }}-dm-store"
  servicebus:
    resourceGroup: bulk-scan-aks
    teamName: "Software Engineering"
    location: ukwest
    serviceplan: basic
    setup:
      queues:
        - name: envelopes
        - name: notifications
        - name: processed-envelopes
        - name: payments

bulk-scan-payment-processor:
  java:
    releaseNameOverride: "{{ .Release.Name }}-bspp"
    ingressHost: ""
    secrets:
      SB_CONN_STRING:
        secretRef: servicebus-secret-namespace-{{ .Release.Name }}-sb
        key: connectionString
      IDAM_CLIENT_SECRET:
        secretRef: bsp-payment-creds
        key: idam-client-secret
      SITE_ID_PROBATE:
        secretRef: bsp-payment-creds
        key: site-id-probate
      SITE_ID_DIVORCE:
        secretRef: bsp-payment-creds
        key: site-id-divorce
      SITE_ID_FINREM:
        secretRef: bsp-payment-creds
        key: site-id-finrem

    environment:
      PAYMENTS_QUEUE_READ_CONNECTION_STRING: "$(SB_CONN_STRING);EntityPath=payments"
      PAY_HUB_URL: "http://{{ .Release.Name }}-payment-api"
      CORE_CASE_DATA_API_URL: "{{tpl .Values.global.ccdDataStoreUrl $}}"
      IDAM_API_URL: "{{ .Values.global.idamApiUrl }}"
      S2S_SECRET: AAAAAAAAAAAAAAAA
      S2S_URL: "http://{{ .Release.Name }}-s2s"

rpe-service-auth-provider:
  java:
    ingressHost: ""
    image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
    releaseNameOverride: "{{ .Release.Name }}-s2s"
    environment:
      TESTING_SUPPORT_ENABLED: 'true'
      MICROSERVICEKEYS_BULK_SCAN_PROCESSOR: AAAAAAAAAAAAAAAA
      MICROSERVICEKEYS_BULK_SCAN_ORCHESTRATOR: AAAAAAAAAAAAAAAA
      MICROSERVICEKEYS_BULK_SCAN_PAYMENT_PROCESSOR: AAAAAAAAAAAAAAAA

dm-store:
  java:
    releaseNameOverride: "{{ .Release.Name}}-dm-store"
    readinessDelay: 180
    livenessDelay: 180
    secrets:
      STORAGE_ACCOUNT_NAME:
        secretRef: storage-secret-{{ .Release.Name }}
        key: storageAccountName
      STORAGE_ACCOUNT_KEY:
        secretRef: storage-secret-{{ .Release.Name }}
        key: accessKey
    keyVaults: {}
    environment:
      ENABLE_DB_MIGRATE: 'true'
      ENABLE_TTL: 'false'
      SPRING_DATASOURCE_URL:  jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/evidence?ssl=disable
      SPRING_DATASOURCE_USERNAME: '{{ .Values.global.postgresqlUsername }}'
      SPRING_DATASOURCE_PASSWORD: '{{ .Values.global.postgresqlPassword }}'
      ENABLE_AZURE_STORAGE_CONTAINER: 'false'
      POSTGRES_STORAGE_ENABLED: 'true'
      STORAGEACCOUNT_PRIMARY_CONNECTION_STRING: "DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net"
      STORAGE_CONTAINER_DOCUMENT_CONTAINER_NAME: dm-store
      IDAM_USER_BASE_URI: '{{ .Values.global.idamApiUrl }}'
      IDAM_S2S_BASE_URI: '{{ .Release.Name }}-s2s'
  blobstorage:
    enabled: true
    resourceGroup: bulk-scan-aks
    teamName: "Software Engineering"
    location: ukwest
    setup:
      containers:
        - dm-store
postgresql:
  persistence:
    enabled: false
  postgresqlUsername: hmcts
  postgresqlPassword: hmcts
  postgresqlDatabase: bulk_scan
  initdbScripts:
    init.sql: |-
      CREATE DATABASE "evidence" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE "payment" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;

bulkscan:
  postgresql:
    enabled: true
  s2s:
    enabled: true
  dmStore:
    enabled: true
  ccd:
    enabled: false
  payment-processor:
    enabled: true
bsp:
  servicebus:
    enabled: true
  blobstorage:
    enabled: false
bso:
  servicebus:
    enabled: false

bs-payment-processor:
  servicebus:
    enabled: false

ccpay:
  postgresql:
    enabled: false
  fees-register-api:
    enabled: false
  rpe-service-auth-provider:
    enabled: false
  ccpay-bubble-frontend:
    enabled: false
  ccpay-bulkscanning-api:
    enabled: false
  payment-api:
    enabled: true
    java:
      releaseNameOverride: "{{ .Release.Name }}-payment-api"
      secrets:
        PCI_PAL_ACCOUNT_ID_CMC:
          disabled: true
        PCI_PAL_ACCOUNT_ID_PROBATE:
          disabled: true
        PCI_PAL_ACCOUNT_ID_DIVORCE:
          disabled: true
        PCI_PAL_API_URL:
          disabled: true
        PCI_PAL_API_KEY:
          disabled: true
        GOV_PAY_KEYS_PROBATE:
          disabled: true
        GOV_PAY_KEYS_DIVORCE:
          disabled: true
        GOV_PAY_KEYS_CMC:
          disabled: true
        GOV_PAY_KEYS_REFERENCE:
          disabled: true
        LIBERATA_KEYS_OAUTH2_CLIENT_ID:
          disabled: true
        LIBERATA_KEYS_OAUTH2_CLIENT_SECRET:
          disabled: true
        LIBERATA_KEYS_OAUTH2_USERNAME:
          disabled: true
        LIBERATA_KEYS_OAUTH2_PASSWORD:
          disabled: true


global:
  postgresqlUsername: hmcts
  postgresqlPassword: hmcts
  bsoIdamRedirectUrl: "https://bulk-scan-orchestrator/oauth2/callback"
  idamApiUrl: "https://idam-api.aat.platform.hmcts.net"
  idamWebUrl: idam-web-public.aat.platform.hmcts.net
  ccdDataStoreUrl: "http://{{ .Release.Name }}-ccd-data-store-api"
  ccdDefinitionStoreUrl: "http://{{ .Release.Name }}-ccd-definition-store"
  ccdUserProfileUrl: "http://{{ .Release.Name }}-ccd-user-profile-api"
  dmStoreUrl: "http://{{ .Release.Name }}-dm-store"
  ccdApiGatewayIngress: ""
  ccdCaseManagementWebIngress: ""
  ccdAdminWebIngress: ""
